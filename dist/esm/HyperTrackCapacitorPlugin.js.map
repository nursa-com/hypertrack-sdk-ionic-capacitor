{"version":3,"file":"HyperTrackCapacitorPlugin.js","sourceRoot":"","sources":["../../src/HyperTrackCapacitorPlugin.ts"],"names":[],"mappings":"","sourcesContent":["import { EVENT_ERRORS, EVENT_IS_AVAILABLE, EVENT_IS_TRACKING, EVENT_LOCATE, EVENT_LOCATION } from \"./HyperTrack\";\nimport { Subscription } from \"./Subscription\";\nimport { Result } from \"./data_types/Result\";\nimport { DeviceId } from \"./data_types/internal/DeviceId\";\nimport { HyperTrackErrorInternal } from \"./data_types/internal/HyperTrackErrorInternal\";\nimport { IsAvailable } from \"./data_types/internal/IsAvailable\";\nimport { IsTracking } from \"./data_types/internal/IsTracking\";\nimport { LocationErrorInternal } from \"./data_types/internal/LocationErrorInternal\";\nimport { LocationInternal } from \"./data_types/internal/LocationInternal\";\nimport { Metadata } from \"./data_types/internal/Metadata\";\nimport { Name } from \"./data_types/internal/Name\";\n\nexport type Errors = {\n  \"errors\": HyperTrackErrorInternal[]\n}\n\nexport interface HyperTrackCapacitorPlugin {\n  addGeotag(\n    ...args: any[]\n  ): Promise<any>;\n\n  getDeviceId(): Promise<DeviceId>;\n\n  getErrors(): Promise<Errors>;\n\n  getIsAvailable(): Promise<IsAvailable>;\n\n  getIsTracking(): Promise<IsTracking>;\n\n  getLocation(): Promise<Result<LocationInternal, LocationErrorInternal>>;\n\n  getMetadata(): Promise<Metadata>;\n\n  getName(): Promise<Name>;\n\n  setIsAvailable(isAvailable: IsAvailable): Promise<void>;\n\n  setIsTracking(isTracking: IsTracking): Promise<void>;\n\n  setMetadata(data: Metadata): Promise<void>;\n\n  setName(name: Name): Promise<void>;\n\n  onSubscribedToErrors(): Promise<void>;\n  onSubscribedToIsAvailable(): Promise<void>;\n  onSubscribedToIsTracking(): Promise<void>;\n  onSubscribedToLocate(): Promise<void>;\n  onSubscribedToLocation(): Promise<void>;\n\n  addListener(\n    eventName: typeof EVENT_ERRORS, \n    listenerFunc: (error: any) => void\n  ): Subscription;\n\n  addListener(\n    eventName: typeof EVENT_IS_AVAILABLE, \n    listenerFunc: (isAvailable: IsAvailable) => void\n    ): Subscription;\n\n  addListener(\n    eventName: typeof EVENT_IS_TRACKING,\n    listenerFunc: (isTracking: IsTracking) => void\n  ): Subscription;\n\n  addListener(\n    eventName: typeof EVENT_LOCATE, \n    listenerFunc: (locateResult: Result<LocationInternal, HyperTrackErrorInternal[]>) => void\n  ): Subscription;\n\n  addListener(\n    eventName: typeof EVENT_LOCATION, \n    listenerFunc: (location: Result<LocationInternal, LocationErrorInternal>) => void\n  ): Subscription;\n}\n"]}